# VERSION DEPENDENCY
# PYTHON : 2.7
# BOTO : 3


#!/usr/bin/python
import boto3
import sys
import re
from botocore.exceptions import ClientError, ParamValidationError
from datetime import datetime, timedelta

unused_volumes = []
used_volumes = []
used_images = []
all_images = []
unused_images = []
ec2 = ""
ec2_client = ""
no_of_days = 0
awsProfile = ""

## new variables
all_volumes = []
snapshots = []
snapshots_with_ami = []
snapshots_with_ebs = []
snapshots_with_deleted_ami = []

## ebs functions start

# get list of all EBS volumes
def get_all_volumes():
    volumes = ec2.volumes.all() # If you want to list out all volumes
    return volumes

# print volumes
def print_volumes(volumes, type=''):
    if volumes != -1:
        for volume in volumes:
            print "ID: {} || state: {} || size: {} || Attachments: {}".format(volume.volume_id, volume.state, volume.size, volume.attachments)
    else:
	print "There are no {} volumes to list".format(type)

# set volumes that are not in any instance and also handels the date logic
def set_unused_volumes(volumes):
    global unused_volumes
    for vol in volumes:
	if vol.state not in ['in-use', 'attached'] and vol.create_time.replace(tzinfo=None).date()<=datetime.utcnow().date() - timedelta(days=no_of_days):
	    unused_volumes.append(vol)
	else:
	    used_volumes.append(vol)
    # print 'Unused volumes: ',unused_volumes
    return unused_volumes if len(unused_volumes) != 0 else -1

# delete unused volumes
def deleteAllVol():
	u = raw_input('Are you sure want to delete all volumes (y/n): ')
	if u in ['y', 'Y']:
		for v in unused_volumes:
			v.delete()
		return "All volumes deleted successfully."
	else:
		return -1

def delete_unused_volumes():
    if len(unused_volumes) == 0:
    	print 'No unused volume to delete. EMPTY!'
    	def sayBye():
    		print "Bye."
    	return sayBye
    else: #there are some unused volumes in a list	
		def deleteVol():
			for v in unused_volumes:
				user_input = raw_input("> Want to delete - volumeId : {} || state : {} || size : {}:\n> (y / n / All)\n:".format(v.volume_id, v.state, v.size))
				if user_input in ['y','Y','yes', 'Yes','YES']:
					if v.delete():
						print "> Volume {} deleted successfully.".format(v.volume_id)
					else:
						print "> Volume {} deletion failed.".format(v.volume_id)
				elif user_input in ['n', 'N', 'no', 'No', 'NO']:
					print "> Skipping deleting volume...\n"
					continue
				elif user_input in ['all', 'All', 'ALL']:
					res = deleteAllVol() 
					print res if res != -1 else ""
					break
		return deleteVol

def delete_ebs():
	print "\n============================================================\n"
	print "All unsed volumes: "
	try:
		print_volumes(set_unused_volumes(get_all_volumes()), 'unused') ## also set unused volumes
		delete_unused_volumes()()
	except ClientError as CE:
		print "(AuthFailure) - Please check you credentials provided.", CE
	finally:
		print "Operation completed"

## ebs functions done ##

## snapshot functions

def getSnapshotsMapped():
	snapshots = ec2_client.describe_snapshots( OwnerIds=["self"])['Snapshots']
	wordToSearch = re.compile('ami')
	for snapshot in snapshots:
		if snapshot['StartTime'].replace(tzinfo=None).date()<=datetime.utcnow().date() - timedelta(days=no_of_days):	
			if wordToSearch.search(snapshot["Description"]): ## set the ami snapshots
				amiId = extractAmiIdFromSnap(snapshot)
				if amiId in unused_images:
					snapshots_with_ami.append(snapshot)
				else:
					snapshots_with_deleted_ami.append(snapshot)
			else: ## set the ebs snapshots
				global all_volumes
				if (snapshot["VolumeId"] not in all_volumes) and snapshot['StartTime'].replace(tzinfo=None).date()<=datetime.utcnow().date() - timedelta(days=no_of_days):
					snapshots_with_ebs.append(snapshot)


def extractAmiIdFromSnap(snapshot):
	snapshotDescription = snapshot["Description"]
	amiId = re.search('ami-(.*) from', snapshotDescription)
	return 'ami-'+amiId.group(1)


## function to set all the volumes keys
def setAllVolumes():
	global all_volumes
	volumes = ec2.volumes.all()
	for volume in volumes:
		all_volumes.append(volume.volume_id)

## functions to set unused ami

def get_all_instances():
	all = ec2.instances.all()
	return all

def set_used_images(instances):
	global used_images
	for instance in instances:
		# print "ID: {}, state: {}, Image: {}, Image_id: {}, instance_id: {}".format(instance.id, instance.state, instance.image, instance.image_id, instance.instance_id)
		used_images.append(instance.image_id)
			# print dir(instance)

def get_all_images():
	print "all images"
	print ec2.images.filter(Owners=['self'])
	return ec2.images.filter(Owners=['self']).all()

#using this function for now
def get_all_images2():
	return ec2_client.describe_images(Owners=['self'])['Images']

def set_all_images(images):
	global all_images
	for img in images:
		all_images.append(img['ImageId'])

def setUnusedImages():
	set_used_images(get_all_instances())
	set_all_images(get_all_images2())
	for img in all_images:
		if img not in used_images:
			unused_images.append(img)

def deleteAllSnapshot():
	for snapshot in snapshots_with_ebs:
		ec2_client.delete_snapshot(SnapshotId=snapshot["SnapshotId"])
	for snapshot in snapshots_with_ami:
		img = extractAmiIdFromSnap(snapshot)
		if ec2.Image(img).deregister():
			ec2_client.delete_snapshot(SnapshotId=snapshot["SnapshotId"])

def printAllUnusedSnapshots():
	print "All unused snapshots"
	for snapshot in snapshots_with_ami:
		print ">  volumeId - {} || snapshotId - {} \n".format(snapshot['VolumeId'],snapshot['SnapshotId'])
	for snapshot in snapshots_with_ebs:
		print ">  volumeId - {} || snapshotId - {} \n".format(snapshot['VolumeId'],snapshot['SnapshotId'])
	
	print "======================================================\n"

def deleteSnapshots():
		if len(snapshots_with_ami) + len(snapshots_with_ebs) != 0:
			print "\n============================================================\n"
			printAllUnusedSnapshots()

			for snapshot in snapshots_with_ami:
				img = extractAmiIdFromSnap(snapshot)
				user_input = raw_input("> Want to delete: volumeId - {} || snapshotId - {} \n>It will also delete the ami - {}     (y/n/all)  \n:".format(snapshot['VolumeId'],snapshot['SnapshotId'], img))
				if user_input in ['y','Y','yes','YES']:
					if ec2.Image(img).deregister():
						ec2_client.delete_snapshot(SnapshotId=snapshot["SnapshotId"])
						print "> Snapshot - {} and corresponding ami - {} deleted successfully.".format(snapshot['SnapshotId'], img)
					else:
						print "> Image {} deletion failed.".format(snapshot[SnapshotId])
				elif user_input in ['n', 'N', 'no', 'No', 'NO']:
					print "> Skipping deleting volume...\n"
					continue
				elif user_input in ['all', 'All', 'ALL']:
					deleteAllSnapshot() 
					print 'all unused snapshots and corresponding ami deleted'
					break
			for snapshot in snapshots_with_ebs + snapshots_with_deleted_ami:
				user_input = raw_input("> Want to delete: volumeId - {} || snapshotId - {} \n(y/n/all):  \n".format(snapshot['VolumeId'],snapshot['SnapshotId'], img))
				if user_input in ['y','Y','yes','YES']:
					ec2_client.delete_snapshot(SnapshotId=snapshot["SnapshotId"])
					print "> Image {} deleted successfully.".format(snapshot['SnapshotId'])
				elif user_input in ['n', 'N', 'no', 'No', 'NO']:
					print "Skipping deleting volume...\n"
					continue
				elif user_input in ['all', 'All', 'ALL']:
					deleteAllSnapshot() 
					print 'all unused snapshots and corresponding ami deleted'
					break
		else:
			print "No unused images to delete. \n\n"


# execution
print "\n===================================================================\n"

# print_images(get_all_images().filter(Owners=['self']).all())
def init():
	global ec2, ec2_client, no_of_days, awsProfile
	awsProfile = raw_input('''
	> Enter the aws profile
	: ''')
	input_days = raw_input('''
	> Enter number of days before or press enter to select all snapshots
	: ''')
	functionToCall = raw_input('''
	> press 1 for EBS clearing
	> press 2 for AMI clearing
	> press Enter to skip
	: ''')

	if(input_days):
		no_of_days = int(input_days)
	else:
		no_of_days = 0

	session = boto3.Session(profile_name=awsProfile)
	ec2 = session.resource('ec2')
	ec2_client = session.client('ec2')

	if functionToCall == '1':
		delete_ebs()

	if functionToCall == '2':
		setAllVolumes()
		setUnusedImages()
		getSnapshotsMapped()
		deleteSnapshots()

init()



print "exit"
print "\n=============================\n"
